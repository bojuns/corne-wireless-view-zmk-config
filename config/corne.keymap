/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define COMBO_TIMEOUT 60
#define FAST_COMBO_TIMEOUT 35
// layers
#define MAC   0
#define WIN   1
#define LOWER 2
#define RAISE 3
#define FUNCT 4
#define GAME  5

&mt {
  compatible = "zmk,behavior-hold-tap";
  tapping-term-ms = <100>;
  quick_tap_ms = <200>;
  flavor = "balanced";
};

&lt {
  compatible = "zmk,behavior-hold-tap";
  tapping-term-ms = <125>;
  quick_tap_ms = <200>;
  flavor = "balanced";
};
/ {
  chosen {
    zmk,matrix_transform = &five_column_transform;
  };
};
/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <FUNCT>;
        };
    };
    behaviors {
        gte_ptr: greater_than_equal_pointer {
            compatible = "zmk,behavior-mod-morph";
            label = "GTE_RPTR";
            #binding-cells = <0>;
            bindings = <&gte>, <&rptr>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};
/ {
    macros {
        line_left: line_left {
            label = "go_line_left";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp LEFT>
                , <&macro_release &kp LCTRL>
                ;
        };
        line_right: line_right {
            label = "go_line_right";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp RIGHT>
                , <&macro_release &kp LCTRL>
                ;
        };
        lte: lte {
            label = "less_than_equal";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LT>
                , <&macro_tap &kp EQUAL>
                ;
        };
        rptr: rptr {
          label = "right_pointer";
          compatible = "zmk,behavior-macro";
          #binding-cells = <0>;
          bindings 
              = <&macro_release &kp LSFT>
              , <&macro_tap &kp MINUS>
              , <&macro_tap &kp GT>
              ;
        };
        gte: gte {
            label = "greater_than_equal";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp GT>
                , <&macro_tap &kp EQUAL>
                ;
        };
    };
};
/ {
    combos {
        compatible = "zmk,combos";
        combo_equal {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <0 1>;
            bindings = <&kp EQUAL>;
            layers = <MAC WIN>;
        };
        combo_minus {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <8 9>;
            bindings = <&kp MINUS>;
            layers = <MAC WIN>;
        };
        combo_plus {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <1 2>;
            bindings = <&kp PLUS>;
            layers = <MAC WIN>;
        };
        combo_under {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <7 8>;
            bindings = <&kp UNDER>;
            layers = <MAC WIN>;
        };
        combo_home {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <10 20>;
            bindings = <&kp HOME>;
            layers = <MAC WIN>;
        };
        combo_end {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <19 29>;
            bindings = <&kp END>;
            layers = <MAC WIN>;
        };
        combo_line_left {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <0 10>;
            bindings = <&line_left>;
            layers = <MAC WIN>;
        };
        combo_line_right {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <9 19>;
            bindings = <&line_right>;
            layers = <MAC WIN>;
        };
        combo_lbrc {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <20 21>;
            bindings = <&kp LBRC>;
            layers = <MAC WIN>;
        };
        combo_rbrc {
            timeout-ms = <FAST_COMBO_TIMEOUT>;
            key-positions = <28 29>;
            bindings = <&kp RBRC>;
            layers = <MAC WIN>;
        };
        combo_lbkt {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <22 23>;
            bindings = <&kp LBKT>;
            layers = <MAC WIN>;
        };
        combo_rbkt {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <26 27>;
            bindings = <&kp RBKT>;
            layers = <MAC WIN>;
        };
        combo_lpar {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <21 22>;
            bindings = <&kp LPAR>;
            layers = <MAC WIN>;
        };
        combo_rpar {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <27 28>;
            bindings = <&kp RPAR>;
            layers = <MAC WIN>;
        };
        combo_lte {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <23 24>;
            bindings = <&lte>;
            layers = <MAC WIN>;
        };
        combo_gte {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <25 26>;
            bindings = <&gte_ptr>;
            layers = <MAC WIN>;
        };
        combo_left {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <15 25>;
            bindings = <&kp LEFT>;
            layers = <MAC WIN>;
        };
        combo_up {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <16 26>;
            bindings = <&kp UP>;
            layers = <MAC WIN>;
        };
        combo_down {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <17 27>;
            bindings = <&kp DOWN>;
            layers = <MAC WIN>;
        };
        combo_right {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <18 28>;
            bindings = <&kp RIGHT>;
            layers = <MAC WIN>;
        };
        combo_b {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <25 26>;
            bindings = <&kp B>;
            layers = <LOWER>;
        };
    };
};
/ {
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <250>;
      quick-tap-ms = <150>;
      global-quick-tap;
      bindings = <&kp>, <&kp>;
    };
  };
  keymap {
   compatible = "zmk,keymap";

    mac_layer {
    // -------------------------------------------------------------------------------------
    // |  Q  =  W  +  F  |  P  |  B  |   |  J  |  L  |  U  _  Y  -  '  |
    // |  A  |  R  |  S  |  T  |  G  |   |  M  |  N  |  E  |  I  |  O  |
    // |  Z  [  X  |  C  |  D  |  V  |   |  K  |  H  |  ,  |  .  ]  /  |
    //   | ESC | LWR(TAB) | LSFT(BKSP) |  SPC  |  RSE(;)  | RET |
    bindings = <
      &kp Q       &kp W      &kp F      &kp P       &kp B  &kp J &kp L       &kp U      &kp Y      &kp SQT     
      &hm LSHFT A &hm LALT R &hm LGUI S &hm LCTRL T &kp G  &kp M &hm RCTRL N &hm RGUI E &hm RALT I &hm RSHFT O 
      &kp Z       &kp X      &kp C      &kp D       &kp V  &kp K &kp H       &kp COMMA  &kp DOT    &kp FSLH    
      &kp ESC &lt LOWER TAB &mt LSHFT BKSP &kp SPACE &lt RAISE SEMI &kp RET
      >;
    };
    
    win_layer {
    // -------------------------------------------------------------------------------------
    // |  Q  =  W  +  F  |  P  |  B  |   |  J  |  L  |  U  _  Y  -  '  |
    // |  A  |  R  |  S  |  T  |  G  |   |  M  |  N  |  E  |  I  |  O  |
    // |  Z  [  X  |  C  |  D  |  V  |   |  K  |  H  |  ,  |  .  ]  /  |
    //   | ESC | LWR(TAB) | LSFT(BKSP) |  SPC  |  RSE(;)  | RET |
    bindings = <
      &kp Q       &kp W      &kp F       &kp P      &kp B  &kp J &kp L       &kp U       &kp Y      &kp SQT     
      &hm LSHFT A &hm LALT R &hm LCTRL S &hm LGUI T &kp G  &kp M &hm RGUI N  &hm RCTRL E &hm RALT I &hm RSHFT O 
      &kp Z       &kp X      &kp C       &kp D      &kp V  &kp K &kp H       &kp COMMA   &kp DOT    &kp FSLH    
      &kp ESC &lt LOWER TAB &mt LSHFT BKSP &kp SPACE &lt RAISE SEMI &kp RET
      >;
    };

    lower_layer {
    // -----------------------------------------------------------------------------
    // |  !  |  @  |  #  |  $  |  %  |   |  %  |  &  |  *  |  "  |  '  |
    // |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |
    // |  |  |  ~  |  :  |  `  |  \  |   |  x  |  h  |  ,  |  .  |  /  |
    //      |  DEL  |  TRANS  |  LGUI  |  BKSP  | MOSPACE |  RET  |
    bindings = <
      &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT  &kp CARET &kp AMPS  &kp STAR  &kp DQT &kp SQT 
      &kp N1    &kp N2    &kp N3    &kp N4    &kp N5     &kp N6    &kp N7    &kp N8    &kp N9   &kp N0   
      &kp PIPE  &kp TILDE &kp COLON &kp GRAVE &kp BSLH   &kp X     &kp H     &kp COMMA &kp DOT  &kp FSLH 
      &kp DEL    &trans  &kp LGUI &kp BKSP  &lt RAISE SPACE &kp RET
      >;
   };

   raise_layer {
    // -----------------------------------------------------------------------------------------
    // | INS  | BACK |  UP  |  FWD | PGUP |   | BRI+ |  VOL+ | (  |  )  | DEL |
    // | CAPS | LEFT | DOWN | RGHT | PRSC |   | AUTO |  MUTE | [  |  ]  |  ;  |
    // | HOME | Z IN | LGUI | ZOUT | PGDN |   | BRI- |  VOL- | {  |  }  | END |
    //                              |   |   | SHIFT |  |   |
    bindings = <
      &kp INS  &kp C_AC_BACK  &kp UP     &kp C_AC_FORWARD  &kp PG_UP &kp C_BRI_UP   &kp C_VOL_UP &kp LPAR &kp RPAR  &kp DEL  
      &kp CAPS &kp LEFT       &kp DOWN   &kp RIGHT         &kp PSCRN &kp C_BRI_AUTO &kp C_MUTE   &kp LBKT &kp RBKT  &kp SEMI 
      &kp HOME &kp C_AC_ZOOM_IN &kp LGUI &kp C_AC_ZOOM_OUT &kp PG_DN &kp C_BRI_DN   &kp C_VOL_DN &kp LBRC &kp RBRC  &kp END  
      &trans    &trans  &kp LSHFT &trans &trans      &trans
      >;
   };

   funct_layer {
    // -----------------------------------------------------------------------------------------
    // | F1 | F2  | F3  | F4  | B |   | BT1 | BLE     | MAC | EP ON |  LGAME  |
    // | F5 | F6  | F7  | F8  | G |   | BT2 | OUT TOG | BTP |  XXX  |   BTN   |
    // | F9 | F10 | F11 | F12 | T |   | BT3 | USB     | WIN | EPOFF | BLE_RST |
    //            | XXX | XXX | XXX | XXX | XXX | XXX |
    bindings = <
      &kp F1 &kp F2  &kp F3  &kp F4  &kp B &bt BT_SEL 0 &out OUT_BLE &to MAC    &ext_power EP_ON  &tog GAME
      &kp F5 &kp F6  &kp F7  &kp F8  &kp G &bt BT_SEL 1 &out OUT_TOG &bt BT_PRV &none             &bt BT_PRV      
      &kp F9 &kp F10 &kp F11 &kp F12 &kp T &bt BT_SEL 2 &out OUT_USB &to WIN    &ext_power EP_OFF &bt BT_CLR     
      &trans   &trans    &trans  &trans  &trans   &trans
      >;
   };  

   game_layer {
    // -----------------------------------------------------------------------------------------
    // | ESC   | Q | W | E | R |   | T | 1 | 2 | 3 | GAME |
    // | LSHFT | A | S | D | G |   | H | 4 | 5 | 6 |  F3  |
    // | M     | Z | X | C | V |   | B | 7 | 8 | 9 |  F5  |
    //             | 4 | 3 | SPC | SPC | 0 | ENT |
    bindings = <
      &kp ESC   &kp Q &kp W &kp E &kp R &kp T &kp N1 &kp N2 &kp N3 &tog GAME
      &kp LSHFT &kp A &kp S &kp D &kp G &kp H &kp N4 &kp N5 &kp N6 &kp F3 
      &kp M     &kp Z &kp X &kp C &kp V &kp B &kp N7 &kp N8 &kp N9 &kp F5 
      &kp N4          &kp N3      &kp SPACE &kp SPACE  &kp N0       &kp RET
      >;
    };
  };
};
